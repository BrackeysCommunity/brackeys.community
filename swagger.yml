openapi: 3.0.0
info:
  title: Brackeys Community API
  description: API for managing Brackeys Discord community data including rules, infractions, and member notes
  version: 1.0.0
  contact:
    name: Brackeys Community
servers:
  - url: /api
    description: API Base URL
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Error message
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          example: ok
        timestamp:
          type: string
          format: date-time
          example: '2025-05-08T23:17:35-05:00'
    Rule:
      type: object
      properties:
        id:
          type: string
          example: '123456789'
        guildId:
          type: string
          example: '987654321'
        title:
          type: string
          example: Be respectful
        description:
          type: string
          example: Treat everyone with respect.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Infraction:
      type: object
      properties:
        id:
          type: string
          example: '123456789'
        guildId:
          type: string
          example: '987654321'
        userId:
          type: string
          example: '876543210'
        type:
          type: string
          example: '0'
          enum:
            - '0'
            - '1'
            - '2'
            - '3'
          description: '0: Warning, 1: Mute, 2: Kick, 3: Ban'
        reason:
          type: string
          example: 'Violated rule #1'
        moderatorId:
          type: string
          example: '765432109'
        createdAt:
          type: string
          format: date-time
    MemberNote:
      type: object
      properties:
        id:
          type: string
          example: '123456789'
        guildId:
          type: string
          example: '987654321'
        userId:
          type: string
          example: '876543210'
        content:
          type: string
          example: 'User was helpful in the #help channel'
        authorId:
          type: string
          example: '765432109'
        createdAt:
          type: string
          format: date-time
security:
  - bearerAuth: []
paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the API health status
      security: []
      responses:
        '200':
          description: Health check successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
  /guilds/{guildId}/rules:
    get:
      summary: Get all rules for a guild
      description: Retrieves all rules for the specified guild
      security: []
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
          description: The Discord guild ID
      responses:
        '200':
          description: A list of rules
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /guilds/{guildId}/rules/{ruleId}:
    get:
      summary: Get rule by ID
      description: Retrieves a specific rule by ID
      security: []
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
          description: The Discord guild ID
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
          description: The rule ID
      responses:
        '200':
          description: The requested rule
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Rule'
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /guilds/{guildId}/infractions:
    get:
      summary: Get all infractions for a guild
      description: Retrieves all infractions for the specified guild (admin only)
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
          description: The Discord guild ID
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Filter by user ID
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - '0'
              - '1'
              - '2'
              - '3'
          description: Filter by infraction type
        - name: limit
          in: query
          required: false
          schema:
            type: string
          description: Maximum number of results to return
        - name: offset
          in: query
          required: false
          schema:
            type: string
          description: Number of results to skip
      responses:
        '200':
          description: A list of infractions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Infraction'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /guilds/{guildId}/users/{userId}/infractions:
    get:
      summary: Get infractions for a specific user
      description: Retrieves all infractions for the specified user
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
          description: The Discord guild ID
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The Discord user ID
        - name: limit
          in: query
          required: false
          schema:
            type: string
          description: Maximum number of results to return
        - name: offset
          in: query
          required: false
          schema:
            type: string
          description: Number of results to skip
      responses:
        '200':
          description: A list of user infractions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Infraction'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /guilds/{guildId}/notes:
    get:
      summary: Get all member notes for a guild
      description: Retrieves all member notes for the specified guild (admin only)
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
          description: The Discord guild ID
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Filter by user ID
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Filter by note type
        - name: limit
          in: query
          required: false
          schema:
            type: string
          description: Maximum number of results to return
        - name: offset
          in: query
          required: false
          schema:
            type: string
          description: Number of results to skip
      responses:
        '200':
          description: A list of member notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemberNote'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /guilds/{guildId}/users/{userId}/notes:
    get:
      summary: Get notes for a specific user
      description: Retrieves all notes for the specified user
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
          description: The Discord guild ID
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The Discord user ID
        - name: limit
          in: query
          required: false
          schema:
            type: string
          description: Maximum number of results to return
        - name: offset
          in: query
          required: false
          schema:
            type: string
          description: Number of results to skip
      responses:
        '200':
          description: A list of user notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemberNote'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
