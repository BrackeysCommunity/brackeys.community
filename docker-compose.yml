services:
  hasura-migrations-init:
    image: oven/bun:latest
    environment:
      HASURA_MIGRATIONS_REPO: ${HASURA_MIGRATIONS_REPO}
      HASURA_MIGRATIONS_BRANCH: ${HASURA_MIGRATIONS_BRANCH:-main}
    volumes:
      - hasura_migrations:/migrations
      - hasura_metadata:/metadata
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        if [ -z "$$HASURA_MIGRATIONS_REPO" ]; then
          echo 'HASURA_MIGRATIONS_REPO not set, skipping clone';
          exit 0;
        fi
        echo 'Installing git...'
        apt-get update && apt-get install -y git
        echo 'Cloning Hasura migrations from' $$HASURA_MIGRATIONS_REPO
        rm -rf /tmp/repo
        git clone --depth 1 --branch $$HASURA_MIGRATIONS_BRANCH $$HASURA_MIGRATIONS_REPO /tmp/repo
        if [ -d /tmp/repo/hasura/migrations ]; then
          echo 'Copying migrations...'
          cp -r /tmp/repo/hasura/migrations/. /migrations/ 2>/dev/null || true
        fi
        if [ -d /tmp/repo/hasura/metadata ]; then
          echo 'Copying metadata...'
          cp -r /tmp/repo/hasura/metadata/. /metadata/ 2>/dev/null || true
        fi
        echo 'Migration data clone complete'
    networks:
      - brackeys

  postgres:
    image: postgres:alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-brackeys}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - brackeys

  hasura:
    image: hasura/graphql-engine:latest.cli-migrations-v3
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      hasura-migrations-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-brackeys}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: ${HASURA_GRAPHQL_UNAUTHORIZED_ROLE:-anonymous}
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: 'naming_convention'
      HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION: 'graphql-default'
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: 'true'
      HASURA_GRAPHQL_ENABLE_TELEMETRY: 'false'
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLE_ALLOWLIST: 'false'
      HASURA_GRAPHQL_CORS_DOMAIN: ${HASURA_GRAPHQL_CORS_DOMAIN:-*}
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: 'false'
      HASURA_GRAPHQL_LOG_LEVEL: ${HASURA_GRAPHQL_LOG_LEVEL:-info}

    volumes:
      # Use local directories
      # - ./hasura/migrations:/hasura-migrations
      # - ./hasura/metadata:/hasura-metadata
      # Or use cloned volumes
      - hasura_migrations:/hasura-migrations
      - hasura_metadata:/hasura-metadata
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost:8080/healthz']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brackeys

volumes:
  postgres_data:
  hasura_migrations:
  hasura_metadata:

networks:
  brackeys:
    driver: bridge
