/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Hammer API
 * API for managing Brackeys Discord community data including rules, infractions, and member notes
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetGuildsGuildIdInfractions200,
  GetGuildsGuildIdNotes200,
  GetGuildsGuildIdRules200,
  GetGuildsGuildIdRulesRuleId200,
  GetGuildsGuildIdUsersUserIdInfractions200,
  GetGuildsGuildIdUsersUserIdNotes200,
  HealthCheck
} from '../models';


export const getGetHealthResponseMock = (overrideResponse: Partial< HealthCheck > = {}): HealthCheck => ({status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetGuildsGuildIdRulesResponseMock = (overrideResponse: Partial< GetGuildsGuildIdRules200 > = {}): GetGuildsGuildIdRules200 => ({success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guildId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), ...overrideResponse})

export const getGetGuildsGuildIdRulesRuleIdResponseMock = (overrideResponse: Partial< GetGuildsGuildIdRulesRuleId200 > = {}): GetGuildsGuildIdRulesRuleId200 => ({success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), data: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guildId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), ...overrideResponse})

export const getGetGuildsGuildIdInfractionsResponseMock = (overrideResponse: Partial< GetGuildsGuildIdInfractions200 > = {}): GetGuildsGuildIdInfractions200 => ({success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guildId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.helpers.arrayElement(['0','1','2','3'] as const), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), moderatorId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), ...overrideResponse})

export const getGetGuildsGuildIdUsersUserIdInfractionsResponseMock = (overrideResponse: Partial< GetGuildsGuildIdUsersUserIdInfractions200 > = {}): GetGuildsGuildIdUsersUserIdInfractions200 => ({success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guildId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.helpers.arrayElement(['0','1','2','3'] as const), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), moderatorId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), ...overrideResponse})

export const getGetGuildsGuildIdNotesResponseMock = (overrideResponse: Partial< GetGuildsGuildIdNotes200 > = {}): GetGuildsGuildIdNotes200 => ({success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guildId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), content: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), authorId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), ...overrideResponse})

export const getGetGuildsGuildIdUsersUserIdNotesResponseMock = (overrideResponse: Partial< GetGuildsGuildIdUsersUserIdNotes200 > = {}): GetGuildsGuildIdUsersUserIdNotes200 => ({success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), guildId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), content: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), authorId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), ...overrideResponse})


export const getGetHealthMockHandler = (overrideResponse?: HealthCheck | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HealthCheck> | HealthCheck)) => {
  return http.get('*/health', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetHealthResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGuildsGuildIdRulesMockHandler = (overrideResponse?: GetGuildsGuildIdRules200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetGuildsGuildIdRules200> | GetGuildsGuildIdRules200)) => {
  return http.get('*/guilds/:guildId/rules', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGuildsGuildIdRulesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGuildsGuildIdRulesRuleIdMockHandler = (overrideResponse?: GetGuildsGuildIdRulesRuleId200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetGuildsGuildIdRulesRuleId200> | GetGuildsGuildIdRulesRuleId200)) => {
  return http.get('*/guilds/:guildId/rules/:ruleId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGuildsGuildIdRulesRuleIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGuildsGuildIdInfractionsMockHandler = (overrideResponse?: GetGuildsGuildIdInfractions200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetGuildsGuildIdInfractions200> | GetGuildsGuildIdInfractions200)) => {
  return http.get('*/guilds/:guildId/infractions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGuildsGuildIdInfractionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGuildsGuildIdUsersUserIdInfractionsMockHandler = (overrideResponse?: GetGuildsGuildIdUsersUserIdInfractions200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetGuildsGuildIdUsersUserIdInfractions200> | GetGuildsGuildIdUsersUserIdInfractions200)) => {
  return http.get('*/guilds/:guildId/users/:userId/infractions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGuildsGuildIdUsersUserIdInfractionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGuildsGuildIdNotesMockHandler = (overrideResponse?: GetGuildsGuildIdNotes200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetGuildsGuildIdNotes200> | GetGuildsGuildIdNotes200)) => {
  return http.get('*/guilds/:guildId/notes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGuildsGuildIdNotesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGuildsGuildIdUsersUserIdNotesMockHandler = (overrideResponse?: GetGuildsGuildIdUsersUserIdNotes200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetGuildsGuildIdUsersUserIdNotes200> | GetGuildsGuildIdUsersUserIdNotes200)) => {
  return http.get('*/guilds/:guildId/users/:userId/notes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGuildsGuildIdUsersUserIdNotesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getHammerAPIMock = () => [
  getGetHealthMockHandler(),
  getGetGuildsGuildIdRulesMockHandler(),
  getGetGuildsGuildIdRulesRuleIdMockHandler(),
  getGetGuildsGuildIdInfractionsMockHandler(),
  getGetGuildsGuildIdUsersUserIdInfractionsMockHandler(),
  getGetGuildsGuildIdNotesMockHandler(),
  getGetGuildsGuildIdUsersUserIdNotesMockHandler()
]
