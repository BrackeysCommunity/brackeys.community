/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Hammer API
 * API for managing Brackeys Discord community data including rules, infractions, and member notes
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Error,
  GetGuildsGuildIdInfractions200,
  GetGuildsGuildIdInfractionsParams,
  GetGuildsGuildIdNotes200,
  GetGuildsGuildIdNotesParams,
  GetGuildsGuildIdRules200,
  GetGuildsGuildIdRulesRuleId200,
  GetGuildsGuildIdUsersUserIdInfractions200,
  GetGuildsGuildIdUsersUserIdInfractionsParams,
  GetGuildsGuildIdUsersUserIdNotes200,
  GetGuildsGuildIdUsersUserIdNotesParams,
  HealthCheck
} from '../models';





/**
 * Returns the API health status
 * @summary Health check endpoint
 */
export const getHealth = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HealthCheck>> => {
    
    
    return axios.default.get(
      `/health`,options
    );
  }


export const getGetHealthQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getGetHealthInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) => getHealth({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthInfiniteQueryError = AxiosError<unknown>


export function useGetHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health check endpoint
 */

export function useGetHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHealthQueryOptions = <TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) => getHealth({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthQueryError = AxiosError<unknown>


export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health check endpoint
 */

export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHealthSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) => getHealth({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthSuspenseQueryError = AxiosError<unknown>


export function useGetHealthSuspense<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthSuspense<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthSuspense<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health check endpoint
 */

export function useGetHealthSuspense<TData = Awaited<ReturnType<typeof getHealth>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHealthSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) => getHealth({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetHealthSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health check endpoint
 */

export function useGetHealthSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealth>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthSuspenseInfiniteQueryOptions(options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves all rules for the specified guild
 * @summary Get all rules for a guild
 */
export const getGuildsGuildIdRules = (
    guildId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGuildsGuildIdRules200>> => {
    
    
    return axios.default.get(
      `/guilds/${guildId}/rules`,options
    );
  }


export const getGetGuildsGuildIdRulesQueryKey = (guildId: string,) => {
    return [`/guilds/${guildId}/rules`] as const;
    }

    
export const getGetGuildsGuildIdRulesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(guildId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesQueryKey(guildId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRules>>> = ({ signal }) => getGuildsGuildIdRules(guildId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>
export type GetGuildsGuildIdRulesInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all rules for a guild
 */

export function useGetGuildsGuildIdRulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesInfiniteQueryOptions(guildId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdRulesQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(guildId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesQueryKey(guildId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRules>>> = ({ signal }) => getGuildsGuildIdRules(guildId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>
export type GetGuildsGuildIdRulesQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRules<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRules<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRules>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRules<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all rules for a guild
 */

export function useGetGuildsGuildIdRules<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesQueryOptions(guildId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdRulesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(guildId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesQueryKey(guildId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRules>>> = ({ signal }) => getGuildsGuildIdRules(guildId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>
export type GetGuildsGuildIdRulesSuspenseQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRulesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all rules for a guild
 */

export function useGetGuildsGuildIdRulesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesSuspenseQueryOptions(guildId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdRulesSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(guildId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesQueryKey(guildId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRules>>> = ({ signal }) => getGuildsGuildIdRules(guildId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>
export type GetGuildsGuildIdRulesSuspenseInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRulesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all rules for a guild
 */

export function useGetGuildsGuildIdRulesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRules>>>, TError = AxiosError<Error>>(
 guildId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRules>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesSuspenseInfiniteQueryOptions(guildId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves a specific rule by ID
 * @summary Get rule by ID
 */
export const getGuildsGuildIdRulesRuleId = (
    guildId: string,
    ruleId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGuildsGuildIdRulesRuleId200>> => {
    
    
    return axios.default.get(
      `/guilds/${guildId}/rules/${ruleId}`,options
    );
  }


export const getGetGuildsGuildIdRulesRuleIdQueryKey = (guildId: string,
    ruleId: string,) => {
    return [`/guilds/${guildId}/rules/${ruleId}`] as const;
    }

    
export const getGetGuildsGuildIdRulesRuleIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(guildId: string,
    ruleId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesRuleIdQueryKey(guildId,ruleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>> = ({ signal }) => getGuildsGuildIdRulesRuleId(guildId,ruleId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId && ruleId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesRuleIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>
export type GetGuildsGuildIdRulesRuleIdInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRulesRuleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get rule by ID
 */

export function useGetGuildsGuildIdRulesRuleIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesRuleIdInfiniteQueryOptions(guildId,ruleId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdRulesRuleIdQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(guildId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesRuleIdQueryKey(guildId,ruleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>> = ({ signal }) => getGuildsGuildIdRulesRuleId(guildId,ruleId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId && ruleId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesRuleIdQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>
export type GetGuildsGuildIdRulesRuleIdQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRulesRuleId<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleId<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleId<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get rule by ID
 */

export function useGetGuildsGuildIdRulesRuleId<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesRuleIdQueryOptions(guildId,ruleId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdRulesRuleIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesRuleIdQueryKey(guildId,ruleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>> = ({ signal }) => getGuildsGuildIdRulesRuleId(guildId,ruleId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesRuleIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>
export type GetGuildsGuildIdRulesRuleIdSuspenseQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRulesRuleIdSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleIdSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleIdSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get rule by ID
 */

export function useGetGuildsGuildIdRulesRuleIdSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesRuleIdSuspenseQueryOptions(guildId,ruleId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdRulesRuleIdSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdRulesRuleIdQueryKey(guildId,ruleId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>> = ({ signal }) => getGuildsGuildIdRulesRuleId(guildId,ruleId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdRulesRuleIdSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>
export type GetGuildsGuildIdRulesRuleIdSuspenseInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdRulesRuleIdSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleIdSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdRulesRuleIdSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get rule by ID
 */

export function useGetGuildsGuildIdRulesRuleIdSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>>, TError = AxiosError<Error>>(
 guildId: string,
    ruleId: string, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdRulesRuleId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdRulesRuleIdSuspenseInfiniteQueryOptions(guildId,ruleId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves all infractions for the specified guild (admin only)
 * @summary Get all infractions for a guild
 */
export const getGuildsGuildIdInfractions = (
    guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGuildsGuildIdInfractions200>> => {
    
    
    return axios.default.get(
      `/guilds/${guildId}/infractions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetGuildsGuildIdInfractionsQueryKey = (guildId: string,
    params?: GetGuildsGuildIdInfractionsParams,) => {
    return [`/guilds/${guildId}/infractions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetGuildsGuildIdInfractionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdInfractionsQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdInfractions(guildId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdInfractionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>>
export type GetGuildsGuildIdInfractionsInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdInfractionsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all infractions for a guild
 */

export function useGetGuildsGuildIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdInfractionsInfiniteQueryOptions(guildId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdInfractionsQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdInfractionsQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>> = ({ signal }) => getGuildsGuildIdInfractions(guildId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdInfractionsQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>>
export type GetGuildsGuildIdInfractionsQueryError = AxiosError<Error>


export function useGetGuildsGuildIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdInfractionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all infractions for a guild
 */

export function useGetGuildsGuildIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdInfractionsQueryOptions(guildId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdInfractionsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdInfractionsQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>> = ({ signal }) => getGuildsGuildIdInfractions(guildId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdInfractionsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>>
export type GetGuildsGuildIdInfractionsSuspenseQueryError = AxiosError<Error>


export function useGetGuildsGuildIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdInfractionsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all infractions for a guild
 */

export function useGetGuildsGuildIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdInfractionsSuspenseQueryOptions(guildId,params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdInfractionsSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdInfractionsQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdInfractions(guildId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdInfractionsSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>>
export type GetGuildsGuildIdInfractionsSuspenseInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdInfractionsParams, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all infractions for a guild
 */

export function useGetGuildsGuildIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, GetGuildsGuildIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdInfractions>>, QueryKey, GetGuildsGuildIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdInfractionsSuspenseInfiniteQueryOptions(guildId,params,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves all infractions for the specified user
 * @summary Get infractions for a specific user
 */
export const getGuildsGuildIdUsersUserIdInfractions = (
    guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGuildsGuildIdUsersUserIdInfractions200>> => {
    
    
    return axios.default.get(
      `/guilds/${guildId}/users/${userId}/infractions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetGuildsGuildIdUsersUserIdInfractionsQueryKey = (guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams,) => {
    return [`/guilds/${guildId}/users/${userId}/infractions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetGuildsGuildIdUsersUserIdInfractionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdInfractionsQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdUsersUserIdInfractions(guildId,userId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId && userId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdInfractionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>>
export type GetGuildsGuildIdUsersUserIdInfractionsInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdInfractionsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get infractions for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdInfractionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdInfractionsInfiniteQueryOptions(guildId,userId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdUsersUserIdInfractionsQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdInfractionsQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>> = ({ signal }) => getGuildsGuildIdUsersUserIdInfractions(guildId,userId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId && userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdInfractionsQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>>
export type GetGuildsGuildIdUsersUserIdInfractionsQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdInfractionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get infractions for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdInfractions<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdInfractionsQueryOptions(guildId,userId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdUsersUserIdInfractionsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdInfractionsQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>> = ({ signal }) => getGuildsGuildIdUsersUserIdInfractions(guildId,userId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdInfractionsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>>
export type GetGuildsGuildIdUsersUserIdInfractionsSuspenseQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdInfractionsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get infractions for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdInfractionsSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdInfractionsSuspenseQueryOptions(guildId,userId,params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdUsersUserIdInfractionsSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdInfractionsQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdUsersUserIdInfractions(guildId,userId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdInfractionsSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>>
export type GetGuildsGuildIdUsersUserIdInfractionsSuspenseInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdInfractionsParams, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get infractions for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdInfractionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdInfractionsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdInfractions>>, QueryKey, GetGuildsGuildIdUsersUserIdInfractionsParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdInfractionsSuspenseInfiniteQueryOptions(guildId,userId,params,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves all member notes for the specified guild (admin only)
 * @summary Get all member notes for a guild
 */
export const getGuildsGuildIdNotes = (
    guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGuildsGuildIdNotes200>> => {
    
    
    return axios.default.get(
      `/guilds/${guildId}/notes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetGuildsGuildIdNotesQueryKey = (guildId: string,
    params?: GetGuildsGuildIdNotesParams,) => {
    return [`/guilds/${guildId}/notes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetGuildsGuildIdNotesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdNotesQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdNotes(guildId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdNotesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>>
export type GetGuildsGuildIdNotesInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdNotesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all member notes for a guild
 */

export function useGetGuildsGuildIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdNotesInfiniteQueryOptions(guildId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdNotesQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdNotesQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>> = ({ signal }) => getGuildsGuildIdNotes(guildId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdNotesQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>>
export type GetGuildsGuildIdNotesQueryError = AxiosError<Error>


export function useGetGuildsGuildIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdNotesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdNotes>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all member notes for a guild
 */

export function useGetGuildsGuildIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdNotesQueryOptions(guildId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdNotesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdNotesQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>> = ({ signal }) => getGuildsGuildIdNotes(guildId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdNotesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>>
export type GetGuildsGuildIdNotesSuspenseQueryError = AxiosError<Error>


export function useGetGuildsGuildIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdNotesParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all member notes for a guild
 */

export function useGetGuildsGuildIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdNotesSuspenseQueryOptions(guildId,params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdNotesSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdNotesQueryKey(guildId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdNotes(guildId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdNotesSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>>
export type GetGuildsGuildIdNotesSuspenseInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params: undefined |  GetGuildsGuildIdNotesParams, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all member notes for a guild
 */

export function useGetGuildsGuildIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, GetGuildsGuildIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    params?: GetGuildsGuildIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdNotes>>, QueryKey, GetGuildsGuildIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdNotesSuspenseInfiniteQueryOptions(guildId,params,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieves all notes for the specified user
 * @summary Get notes for a specific user
 */
export const getGuildsGuildIdUsersUserIdNotes = (
    guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetGuildsGuildIdUsersUserIdNotes200>> => {
    
    
    return axios.default.get(
      `/guilds/${guildId}/users/${userId}/notes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetGuildsGuildIdUsersUserIdNotesQueryKey = (guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams,) => {
    return [`/guilds/${guildId}/users/${userId}/notes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetGuildsGuildIdUsersUserIdNotesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdNotesQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdUsersUserIdNotes(guildId,userId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId && userId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdNotesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>>
export type GetGuildsGuildIdUsersUserIdNotesInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdNotesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get notes for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdNotesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdNotesInfiniteQueryOptions(guildId,userId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdUsersUserIdNotesQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdNotesQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>> = ({ signal }) => getGuildsGuildIdUsersUserIdNotes(guildId,userId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(guildId && userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdNotesQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>>
export type GetGuildsGuildIdUsersUserIdNotesQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdNotesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>,
          TError,
          Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get notes for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdNotes<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdNotesQueryOptions(guildId,userId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdUsersUserIdNotesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdNotesQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>> = ({ signal }) => getGuildsGuildIdUsersUserIdNotes(guildId,userId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdNotesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>>
export type GetGuildsGuildIdUsersUserIdNotesSuspenseQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdNotesParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get notes for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdNotesSuspense<TData = Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdNotesSuspenseQueryOptions(guildId,userId,params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGuildsGuildIdUsersUserIdNotesSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGuildsGuildIdUsersUserIdNotesQueryKey(guildId,userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']> = ({ signal, pageParam }) => getGuildsGuildIdUsersUserIdNotes(guildId,userId,{...params, 'limit': pageParam || params?.['limit']}, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGuildsGuildIdUsersUserIdNotesSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>>
export type GetGuildsGuildIdUsersUserIdNotesSuspenseInfiniteQueryError = AxiosError<Error>


export function useGetGuildsGuildIdUsersUserIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params: undefined |  GetGuildsGuildIdUsersUserIdNotesParams, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetGuildsGuildIdUsersUserIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get notes for a specific user
 */

export function useGetGuildsGuildIdUsersUserIdNotesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, GetGuildsGuildIdUsersUserIdNotesParams['limit']>, TError = AxiosError<Error>>(
 guildId: string,
    userId: string,
    params?: GetGuildsGuildIdUsersUserIdNotesParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, TError, TData, Awaited<ReturnType<typeof getGuildsGuildIdUsersUserIdNotes>>, QueryKey, GetGuildsGuildIdUsersUserIdNotesParams['limit']>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetGuildsGuildIdUsersUserIdNotesSuspenseInfiniteQueryOptions(guildId,userId,params,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




