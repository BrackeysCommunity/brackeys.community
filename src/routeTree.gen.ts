/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SandboxRouteImport } from './routes/sandbox'
import { Route as ResourcesRouteImport } from './routes/resources'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as CollaborationHubRouteImport } from './routes/collaboration-hub'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CollaborationsIndexRouteImport } from './routes/collaborations/index'
import { Route as ToolsToolIdRouteImport } from './routes/tools/$toolId'
import { Route as GamesSnakeRouteImport } from './routes/games/snake'
import { Route as CollaborationsPostIdRouteImport } from './routes/collaborations/$postId'
import { Route as AuthEntryRouteImport } from './routes/auth/entry'
import { Route as ApiWebhooksClerkRouteImport } from './routes/api/webhooks/clerk'
import { Route as ApiAuthSyncDiscordRouteImport } from './routes/api/auth/sync-discord'

const SandboxRoute = SandboxRouteImport.update({
  id: '/sandbox',
  path: '/sandbox',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourcesRoute = ResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const CollaborationHubRoute = CollaborationHubRouteImport.update({
  id: '/collaboration-hub',
  path: '/collaboration-hub',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CollaborationsIndexRoute = CollaborationsIndexRouteImport.update({
  id: '/collaborations/',
  path: '/collaborations/',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsToolIdRoute = ToolsToolIdRouteImport.update({
  id: '/tools/$toolId',
  path: '/tools/$toolId',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesSnakeRoute = GamesSnakeRouteImport.update({
  id: '/games/snake',
  path: '/games/snake',
  getParentRoute: () => rootRouteImport,
} as any)
const CollaborationsPostIdRoute = CollaborationsPostIdRouteImport.update({
  id: '/collaborations/$postId',
  path: '/collaborations/$postId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthEntryRoute = AuthEntryRouteImport.update({
  id: '/auth/entry',
  path: '/auth/entry',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWebhooksClerkRoute = ApiWebhooksClerkRouteImport.update({
  id: '/api/webhooks/clerk',
  path: '/api/webhooks/clerk',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSyncDiscordRoute = ApiAuthSyncDiscordRouteImport.update({
  id: '/api/auth/sync-discord',
  path: '/api/auth/sync-discord',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/collaboration-hub': typeof CollaborationHubRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/resources': typeof ResourcesRoute
  '/sandbox': typeof SandboxRoute
  '/auth/entry': typeof AuthEntryRoute
  '/collaborations/$postId': typeof CollaborationsPostIdRoute
  '/games/snake': typeof GamesSnakeRoute
  '/tools/$toolId': typeof ToolsToolIdRoute
  '/collaborations': typeof CollaborationsIndexRoute
  '/api/auth/sync-discord': typeof ApiAuthSyncDiscordRoute
  '/api/webhooks/clerk': typeof ApiWebhooksClerkRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/collaboration-hub': typeof CollaborationHubRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/resources': typeof ResourcesRoute
  '/sandbox': typeof SandboxRoute
  '/auth/entry': typeof AuthEntryRoute
  '/collaborations/$postId': typeof CollaborationsPostIdRoute
  '/games/snake': typeof GamesSnakeRoute
  '/tools/$toolId': typeof ToolsToolIdRoute
  '/collaborations': typeof CollaborationsIndexRoute
  '/api/auth/sync-discord': typeof ApiAuthSyncDiscordRoute
  '/api/webhooks/clerk': typeof ApiWebhooksClerkRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/collaboration-hub': typeof CollaborationHubRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/resources': typeof ResourcesRoute
  '/sandbox': typeof SandboxRoute
  '/auth/entry': typeof AuthEntryRoute
  '/collaborations/$postId': typeof CollaborationsPostIdRoute
  '/games/snake': typeof GamesSnakeRoute
  '/tools/$toolId': typeof ToolsToolIdRoute
  '/collaborations/': typeof CollaborationsIndexRoute
  '/api/auth/sync-discord': typeof ApiAuthSyncDiscordRoute
  '/api/webhooks/clerk': typeof ApiWebhooksClerkRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/collaboration-hub'
    | '/login'
    | '/profile'
    | '/resources'
    | '/sandbox'
    | '/auth/entry'
    | '/collaborations/$postId'
    | '/games/snake'
    | '/tools/$toolId'
    | '/collaborations'
    | '/api/auth/sync-discord'
    | '/api/webhooks/clerk'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/collaboration-hub'
    | '/login'
    | '/profile'
    | '/resources'
    | '/sandbox'
    | '/auth/entry'
    | '/collaborations/$postId'
    | '/games/snake'
    | '/tools/$toolId'
    | '/collaborations'
    | '/api/auth/sync-discord'
    | '/api/webhooks/clerk'
  id:
    | '__root__'
    | '/'
    | '/collaboration-hub'
    | '/login'
    | '/profile'
    | '/resources'
    | '/sandbox'
    | '/auth/entry'
    | '/collaborations/$postId'
    | '/games/snake'
    | '/tools/$toolId'
    | '/collaborations/'
    | '/api/auth/sync-discord'
    | '/api/webhooks/clerk'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CollaborationHubRoute: typeof CollaborationHubRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  ResourcesRoute: typeof ResourcesRoute
  SandboxRoute: typeof SandboxRoute
  AuthEntryRoute: typeof AuthEntryRoute
  CollaborationsPostIdRoute: typeof CollaborationsPostIdRoute
  GamesSnakeRoute: typeof GamesSnakeRoute
  ToolsToolIdRoute: typeof ToolsToolIdRoute
  CollaborationsIndexRoute: typeof CollaborationsIndexRoute
  ApiAuthSyncDiscordRoute: typeof ApiAuthSyncDiscordRoute
  ApiWebhooksClerkRoute: typeof ApiWebhooksClerkRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sandbox': {
      id: '/sandbox'
      path: '/sandbox'
      fullPath: '/sandbox'
      preLoaderRoute: typeof SandboxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collaboration-hub': {
      id: '/collaboration-hub'
      path: '/collaboration-hub'
      fullPath: '/collaboration-hub'
      preLoaderRoute: typeof CollaborationHubRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collaborations/': {
      id: '/collaborations/'
      path: '/collaborations'
      fullPath: '/collaborations'
      preLoaderRoute: typeof CollaborationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/$toolId': {
      id: '/tools/$toolId'
      path: '/tools/$toolId'
      fullPath: '/tools/$toolId'
      preLoaderRoute: typeof ToolsToolIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games/snake': {
      id: '/games/snake'
      path: '/games/snake'
      fullPath: '/games/snake'
      preLoaderRoute: typeof GamesSnakeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collaborations/$postId': {
      id: '/collaborations/$postId'
      path: '/collaborations/$postId'
      fullPath: '/collaborations/$postId'
      preLoaderRoute: typeof CollaborationsPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/entry': {
      id: '/auth/entry'
      path: '/auth/entry'
      fullPath: '/auth/entry'
      preLoaderRoute: typeof AuthEntryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/webhooks/clerk': {
      id: '/api/webhooks/clerk'
      path: '/api/webhooks/clerk'
      fullPath: '/api/webhooks/clerk'
      preLoaderRoute: typeof ApiWebhooksClerkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/sync-discord': {
      id: '/api/auth/sync-discord'
      path: '/api/auth/sync-discord'
      fullPath: '/api/auth/sync-discord'
      preLoaderRoute: typeof ApiAuthSyncDiscordRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CollaborationHubRoute: CollaborationHubRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  ResourcesRoute: ResourcesRoute,
  SandboxRoute: SandboxRoute,
  AuthEntryRoute: AuthEntryRoute,
  CollaborationsPostIdRoute: CollaborationsPostIdRoute,
  GamesSnakeRoute: GamesSnakeRoute,
  ToolsToolIdRoute: ToolsToolIdRoute,
  CollaborationsIndexRoute: CollaborationsIndexRoute,
  ApiAuthSyncDiscordRoute: ApiAuthSyncDiscordRoute,
  ApiWebhooksClerkRoute: ApiWebhooksClerkRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
