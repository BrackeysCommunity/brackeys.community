// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CleanupOldMessages } from "./cleanup_old_messages_reducer.ts";
export { CleanupOldMessages };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateRoom } from "./create_room_reducer.ts";
export { CreateRoom };
import { DismissMessage } from "./dismiss_message_reducer.ts";
export { DismissMessage };
import { JoinRoom } from "./join_room_reducer.ts";
export { JoinRoom };
import { LeaveRoom } from "./leave_room_reducer.ts";
export { LeaveRoom };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetDisplayName } from "./set_display_name_reducer.ts";
export { SetDisplayName };
import { UpdateColor } from "./update_color_reducer.ts";
export { UpdateColor };
import { UpdateCursor } from "./update_cursor_reducer.ts";
export { UpdateCursor };
import { UpdateRoomConfig } from "./update_room_config_reducer.ts";
export { UpdateRoomConfig };
import { UpdateTyping } from "./update_typing_reducer.ts";
export { UpdateTyping };

// Import and reexport all table handle types
import { CleanupScheduleTableHandle } from "./cleanup_schedule_table.ts";
export { CleanupScheduleTableHandle };
import { LiveTypingTableHandle } from "./live_typing_table.ts";
export { LiveTypingTableHandle };
import { RoomTableHandle } from "./room_table.ts";
export { RoomTableHandle };
import { SandboxMessageTableHandle } from "./sandbox_message_table.ts";
export { SandboxMessageTableHandle };
import { SandboxUserTableHandle } from "./sandbox_user_table.ts";
export { SandboxUserTableHandle };

// Import and reexport all types
import { CleanupSchedule } from "./cleanup_schedule_type.ts";
export { CleanupSchedule };
import { LiveTyping } from "./live_typing_type.ts";
export { LiveTyping };
import { Room } from "./room_type.ts";
export { Room };
import { SandboxMessage } from "./sandbox_message_type.ts";
export { SandboxMessage };
import { SandboxUser } from "./sandbox_user_type.ts";
export { SandboxUser };

const REMOTE_MODULE = {
  tables: {
    cleanup_schedule: {
      tableName: "cleanup_schedule",
      rowType: CleanupSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    live_typing: {
      tableName: "live_typing",
      rowType: LiveTyping.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    room: {
      tableName: "room",
      rowType: Room.getTypeScriptAlgebraicType(),
      primaryKey: "code",
    },
    sandbox_message: {
      tableName: "sandbox_message",
      rowType: SandboxMessage.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    sandbox_user: {
      tableName: "sandbox_user",
      rowType: SandboxUser.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    cleanup_old_messages: {
      reducerName: "cleanup_old_messages",
      argsType: CleanupOldMessages.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    create_room: {
      reducerName: "create_room",
      argsType: CreateRoom.getTypeScriptAlgebraicType(),
    },
    dismiss_message: {
      reducerName: "dismiss_message",
      argsType: DismissMessage.getTypeScriptAlgebraicType(),
    },
    join_room: {
      reducerName: "join_room",
      argsType: JoinRoom.getTypeScriptAlgebraicType(),
    },
    leave_room: {
      reducerName: "leave_room",
      argsType: LeaveRoom.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_display_name: {
      reducerName: "set_display_name",
      argsType: SetDisplayName.getTypeScriptAlgebraicType(),
    },
    update_color: {
      reducerName: "update_color",
      argsType: UpdateColor.getTypeScriptAlgebraicType(),
    },
    update_cursor: {
      reducerName: "update_cursor",
      argsType: UpdateCursor.getTypeScriptAlgebraicType(),
    },
    update_room_config: {
      reducerName: "update_room_config",
      argsType: UpdateRoomConfig.getTypeScriptAlgebraicType(),
    },
    update_typing: {
      reducerName: "update_typing",
      argsType: UpdateTyping.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CleanupOldMessages", args: CleanupOldMessages }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateRoom", args: CreateRoom }
| { name: "DismissMessage", args: DismissMessage }
| { name: "JoinRoom", args: JoinRoom }
| { name: "LeaveRoom", args: LeaveRoom }
| { name: "SendMessage", args: SendMessage }
| { name: "SetDisplayName", args: SetDisplayName }
| { name: "UpdateColor", args: UpdateColor }
| { name: "UpdateCursor", args: UpdateCursor }
| { name: "UpdateRoomConfig", args: UpdateRoomConfig }
| { name: "UpdateTyping", args: UpdateTyping }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  cleanupOldMessages(arg: CleanupSchedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    CleanupOldMessages.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cleanup_old_messages", __argsBuffer, this.setCallReducerFlags.cleanupOldMessagesFlags);
  }

  onCleanupOldMessages(callback: (ctx: ReducerEventContext, arg: CleanupSchedule) => void) {
    this.connection.onReducer("cleanup_old_messages", callback);
  }

  removeOnCleanupOldMessages(callback: (ctx: ReducerEventContext, arg: CleanupSchedule) => void) {
    this.connection.offReducer("cleanup_old_messages", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  createRoom(roomCode: string, passwordHash: string, messageTtlSeconds: number, messagesEnabled: boolean) {
    const __args = { roomCode, passwordHash, messageTtlSeconds, messagesEnabled };
    let __writer = new BinaryWriter(1024);
    CreateRoom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_room", __argsBuffer, this.setCallReducerFlags.createRoomFlags);
  }

  onCreateRoom(callback: (ctx: ReducerEventContext, roomCode: string, passwordHash: string, messageTtlSeconds: number, messagesEnabled: boolean) => void) {
    this.connection.onReducer("create_room", callback);
  }

  removeOnCreateRoom(callback: (ctx: ReducerEventContext, roomCode: string, passwordHash: string, messageTtlSeconds: number, messagesEnabled: boolean) => void) {
    this.connection.offReducer("create_room", callback);
  }

  dismissMessage(messageId: bigint) {
    const __args = { messageId };
    let __writer = new BinaryWriter(1024);
    DismissMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("dismiss_message", __argsBuffer, this.setCallReducerFlags.dismissMessageFlags);
  }

  onDismissMessage(callback: (ctx: ReducerEventContext, messageId: bigint) => void) {
    this.connection.onReducer("dismiss_message", callback);
  }

  removeOnDismissMessage(callback: (ctx: ReducerEventContext, messageId: bigint) => void) {
    this.connection.offReducer("dismiss_message", callback);
  }

  joinRoom(roomCode: string, passwordHash: string) {
    const __args = { roomCode, passwordHash };
    let __writer = new BinaryWriter(1024);
    JoinRoom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_room", __argsBuffer, this.setCallReducerFlags.joinRoomFlags);
  }

  onJoinRoom(callback: (ctx: ReducerEventContext, roomCode: string, passwordHash: string) => void) {
    this.connection.onReducer("join_room", callback);
  }

  removeOnJoinRoom(callback: (ctx: ReducerEventContext, roomCode: string, passwordHash: string) => void) {
    this.connection.offReducer("join_room", callback);
  }

  leaveRoom() {
    this.connection.callReducer("leave_room", new Uint8Array(0), this.setCallReducerFlags.leaveRoomFlags);
  }

  onLeaveRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("leave_room", callback);
  }

  removeOnLeaveRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("leave_room", callback);
  }

  sendMessage(text: string, x: number, y: number) {
    const __args = { text, x, y };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string, x: number, y: number) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string, x: number, y: number) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setDisplayName(name: string, color: string) {
    const __args = { name, color };
    let __writer = new BinaryWriter(1024);
    SetDisplayName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_display_name", __argsBuffer, this.setCallReducerFlags.setDisplayNameFlags);
  }

  onSetDisplayName(callback: (ctx: ReducerEventContext, name: string, color: string) => void) {
    this.connection.onReducer("set_display_name", callback);
  }

  removeOnSetDisplayName(callback: (ctx: ReducerEventContext, name: string, color: string) => void) {
    this.connection.offReducer("set_display_name", callback);
  }

  updateColor(color: string) {
    const __args = { color };
    let __writer = new BinaryWriter(1024);
    UpdateColor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_color", __argsBuffer, this.setCallReducerFlags.updateColorFlags);
  }

  onUpdateColor(callback: (ctx: ReducerEventContext, color: string) => void) {
    this.connection.onReducer("update_color", callback);
  }

  removeOnUpdateColor(callback: (ctx: ReducerEventContext, color: string) => void) {
    this.connection.offReducer("update_color", callback);
  }

  updateCursor(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    UpdateCursor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_cursor", __argsBuffer, this.setCallReducerFlags.updateCursorFlags);
  }

  onUpdateCursor(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("update_cursor", callback);
  }

  removeOnUpdateCursor(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("update_cursor", callback);
  }

  updateRoomConfig(messageTtlSeconds: number, messagesEnabled: boolean) {
    const __args = { messageTtlSeconds, messagesEnabled };
    let __writer = new BinaryWriter(1024);
    UpdateRoomConfig.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_room_config", __argsBuffer, this.setCallReducerFlags.updateRoomConfigFlags);
  }

  onUpdateRoomConfig(callback: (ctx: ReducerEventContext, messageTtlSeconds: number, messagesEnabled: boolean) => void) {
    this.connection.onReducer("update_room_config", callback);
  }

  removeOnUpdateRoomConfig(callback: (ctx: ReducerEventContext, messageTtlSeconds: number, messagesEnabled: boolean) => void) {
    this.connection.offReducer("update_room_config", callback);
  }

  updateTyping(text: string, x: number, y: number, selectionStart: number, selectionEnd: number) {
    const __args = { text, x, y, selectionStart, selectionEnd };
    let __writer = new BinaryWriter(1024);
    UpdateTyping.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_typing", __argsBuffer, this.setCallReducerFlags.updateTypingFlags);
  }

  onUpdateTyping(callback: (ctx: ReducerEventContext, text: string, x: number, y: number, selectionStart: number, selectionEnd: number) => void) {
    this.connection.onReducer("update_typing", callback);
  }

  removeOnUpdateTyping(callback: (ctx: ReducerEventContext, text: string, x: number, y: number, selectionStart: number, selectionEnd: number) => void) {
    this.connection.offReducer("update_typing", callback);
  }

}

export class SetReducerFlags {
  cleanupOldMessagesFlags: CallReducerFlags = 'FullUpdate';
  cleanupOldMessages(flags: CallReducerFlags) {
    this.cleanupOldMessagesFlags = flags;
  }

  createRoomFlags: CallReducerFlags = 'FullUpdate';
  createRoom(flags: CallReducerFlags) {
    this.createRoomFlags = flags;
  }

  dismissMessageFlags: CallReducerFlags = 'FullUpdate';
  dismissMessage(flags: CallReducerFlags) {
    this.dismissMessageFlags = flags;
  }

  joinRoomFlags: CallReducerFlags = 'FullUpdate';
  joinRoom(flags: CallReducerFlags) {
    this.joinRoomFlags = flags;
  }

  leaveRoomFlags: CallReducerFlags = 'FullUpdate';
  leaveRoom(flags: CallReducerFlags) {
    this.leaveRoomFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setDisplayNameFlags: CallReducerFlags = 'FullUpdate';
  setDisplayName(flags: CallReducerFlags) {
    this.setDisplayNameFlags = flags;
  }

  updateColorFlags: CallReducerFlags = 'FullUpdate';
  updateColor(flags: CallReducerFlags) {
    this.updateColorFlags = flags;
  }

  updateCursorFlags: CallReducerFlags = 'FullUpdate';
  updateCursor(flags: CallReducerFlags) {
    this.updateCursorFlags = flags;
  }

  updateRoomConfigFlags: CallReducerFlags = 'FullUpdate';
  updateRoomConfig(flags: CallReducerFlags) {
    this.updateRoomConfigFlags = flags;
  }

  updateTypingFlags: CallReducerFlags = 'FullUpdate';
  updateTyping(flags: CallReducerFlags) {
    this.updateTypingFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get cleanupSchedule(): CleanupScheduleTableHandle {
    return new CleanupScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CleanupSchedule>(REMOTE_MODULE.tables.cleanup_schedule));
  }

  get liveTyping(): LiveTypingTableHandle {
    return new LiveTypingTableHandle(this.connection.clientCache.getOrCreateTable<LiveTyping>(REMOTE_MODULE.tables.live_typing));
  }

  get room(): RoomTableHandle {
    return new RoomTableHandle(this.connection.clientCache.getOrCreateTable<Room>(REMOTE_MODULE.tables.room));
  }

  get sandboxMessage(): SandboxMessageTableHandle {
    return new SandboxMessageTableHandle(this.connection.clientCache.getOrCreateTable<SandboxMessage>(REMOTE_MODULE.tables.sandbox_message));
  }

  get sandboxUser(): SandboxUserTableHandle {
    return new SandboxUserTableHandle(this.connection.clientCache.getOrCreateTable<SandboxUser>(REMOTE_MODULE.tables.sandbox_user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
