/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  '\n  query AltAccounts {\n    altAccount {\n      userId\n      altId\n      staffMemberId\n      registeredAt\n    }\n  }\n': typeof types.AltAccountsDocument;
  '\n  query Collabs {\n    collaborationProfile {\n      id\n      displayName\n      bio\n    }\n  }\n': typeof types.CollabsDocument;
  '\n  query CollaborationTypes {\n    collaborationType {\n      id\n      name\n      description\n    }\n  }\n': typeof types.CollaborationTypesDocument;
  '\n  query HiringStatuses {\n    hiringStatus {\n      id\n      name\n      description\n    }\n  }\n': typeof types.HiringStatusesDocument;
  '\n  query CollaborationStatuses {\n    collaborationStatus {\n      id\n      name\n      description\n    }\n  }\n': typeof types.CollaborationStatusesDocument;
  '\n  query MyCollaborationProfile($userId: Int64!) {\n    collaborationProfile(where: { userId: { _eq: $userId } }) {\n      id\n      userId\n      guildId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      createdAt\n      updatedAt\n      lastActiveAt\n      collaborationPosts {\n        id\n        statusId\n        responseCount\n        viewCount\n      }\n      collaborationResponses {\n        id\n        collaborationPostId\n        isRead\n      }\n      collaborationBookmarks {\n        id\n        collaborationPostId\n      }\n    }\n  }\n': typeof types.MyCollaborationProfileDocument;
  '\n  query CollaborationProfileById($id: String1!) {\n    collaborationProfileById(id: $id) {\n      id\n      userId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      lastActiveAt\n      collaborationPosts(where: { statusId: { _eq: 2 } }, order_by: { postedAt: Desc }) {\n        id\n        collaborationTypeId\n        hiringStatusId\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          id\n          value\n          collaborationFieldDefinition {\n            id\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n': typeof types.CollaborationProfileByIdDocument;
  '\n  query CollaborationPosts(\n    $where: CollaborationPostBoolExp\n    $limit: Int\n    $offset: Int\n    $order_by: [CollaborationPostOrderByExp!]\n  ) {\n    collaborationPost(where: $where, limit: $limit, offset: $offset, order_by: $order_by) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        userId\n      }\n      collaborationType {\n        id\n        name\n      }\n      hiringStatus {\n        id\n        name\n      }\n      collaborationStatus {\n        id\n        name\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n        }\n      }\n      collaborationBookmarks {\n        profileId\n      }\n    }\n    collaborationPostAggregate(filter_input: { where: $where }) {\n      _count\n    }\n  }\n': typeof types.CollaborationPostsDocument;
  '\n  query CollaborationPostDetail($id: String1!) {\n    collaborationPostById(id: $id) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        portfolio\n        contactPreferences\n        userId\n        lastActiveAt\n        isPublic\n      }\n      collaborationType {\n        id\n        name\n        description\n      }\n      hiringStatus {\n        id\n        name\n        description\n      }\n      collaborationStatus {\n        id\n        name\n        description\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n          helpText\n        }\n      }\n      collaborationResponses(where: { isHidden: { _eq: 0 } }, order_by: { createdAt: Desc }) {\n        id\n        profileId\n        message\n        contactInfo\n        isPublic\n        createdAt\n        isRead\n        collaborationProfile {\n          id\n          displayName\n          userId\n        }\n      }\n    }\n  }\n': typeof types.CollaborationPostDetailDocument;
  '\n  query CollaborationFieldDefinitions($typeId: Int32!, $hiringStatusId: Int32!) {\n    collaborationFieldDefinition(\n      where: { collaborationTypeId: { _eq: $typeId }, hiringStatusId: { _eq: $hiringStatusId } }\n      order_by: { fieldOrder: Asc }\n    ) {\n      id\n      fieldName\n      displayName\n      fieldType\n      isRequired\n      fieldOrder\n      maxLength\n      validationRegex\n      helpText\n      options\n    }\n  }\n': typeof types.CollaborationFieldDefinitionsDocument;
  '\n  query MyCollaborationResponses($profileId: String1!) {\n    collaborationResponse(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      message\n      contactInfo\n      isPublic\n      isHidden\n      createdAt\n      isRead\n      readAt\n      collaborationPost {\n        id\n        statusId\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n      }\n    }\n  }\n': typeof types.MyCollaborationResponsesDocument;
  '\n  query PostResponses($postId: String1!, $profileId: String1!) {\n    collaborationResponse(\n      where: {\n        collaborationPostId: { _eq: $postId }\n        _or: [{ collaborationPost: { profileId: { _eq: $profileId } } }, { isPublic: { _eq: 1 } }]\n        isHidden: { _eq: 0 }\n      }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      profileId\n      message\n      contactInfo\n      isPublic\n      createdAt\n      isRead\n      readAt\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        userId\n      }\n    }\n  }\n': typeof types.PostResponsesDocument;
  '\n  query MyBookmarks($profileId: String1!) {\n    collaborationBookmark(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      createdAt\n      collaborationPost {\n        id\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          value\n          collaborationFieldDefinition {\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n': typeof types.MyBookmarksDocument;
};
const documents: Documents = {
  '\n  query AltAccounts {\n    altAccount {\n      userId\n      altId\n      staffMemberId\n      registeredAt\n    }\n  }\n':
    types.AltAccountsDocument,
  '\n  query Collabs {\n    collaborationProfile {\n      id\n      displayName\n      bio\n    }\n  }\n':
    types.CollabsDocument,
  '\n  query CollaborationTypes {\n    collaborationType {\n      id\n      name\n      description\n    }\n  }\n':
    types.CollaborationTypesDocument,
  '\n  query HiringStatuses {\n    hiringStatus {\n      id\n      name\n      description\n    }\n  }\n':
    types.HiringStatusesDocument,
  '\n  query CollaborationStatuses {\n    collaborationStatus {\n      id\n      name\n      description\n    }\n  }\n':
    types.CollaborationStatusesDocument,
  '\n  query MyCollaborationProfile($userId: Int64!) {\n    collaborationProfile(where: { userId: { _eq: $userId } }) {\n      id\n      userId\n      guildId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      createdAt\n      updatedAt\n      lastActiveAt\n      collaborationPosts {\n        id\n        statusId\n        responseCount\n        viewCount\n      }\n      collaborationResponses {\n        id\n        collaborationPostId\n        isRead\n      }\n      collaborationBookmarks {\n        id\n        collaborationPostId\n      }\n    }\n  }\n':
    types.MyCollaborationProfileDocument,
  '\n  query CollaborationProfileById($id: String1!) {\n    collaborationProfileById(id: $id) {\n      id\n      userId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      lastActiveAt\n      collaborationPosts(where: { statusId: { _eq: 2 } }, order_by: { postedAt: Desc }) {\n        id\n        collaborationTypeId\n        hiringStatusId\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          id\n          value\n          collaborationFieldDefinition {\n            id\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n':
    types.CollaborationProfileByIdDocument,
  '\n  query CollaborationPosts(\n    $where: CollaborationPostBoolExp\n    $limit: Int\n    $offset: Int\n    $order_by: [CollaborationPostOrderByExp!]\n  ) {\n    collaborationPost(where: $where, limit: $limit, offset: $offset, order_by: $order_by) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        userId\n      }\n      collaborationType {\n        id\n        name\n      }\n      hiringStatus {\n        id\n        name\n      }\n      collaborationStatus {\n        id\n        name\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n        }\n      }\n      collaborationBookmarks {\n        profileId\n      }\n    }\n    collaborationPostAggregate(filter_input: { where: $where }) {\n      _count\n    }\n  }\n':
    types.CollaborationPostsDocument,
  '\n  query CollaborationPostDetail($id: String1!) {\n    collaborationPostById(id: $id) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        portfolio\n        contactPreferences\n        userId\n        lastActiveAt\n        isPublic\n      }\n      collaborationType {\n        id\n        name\n        description\n      }\n      hiringStatus {\n        id\n        name\n        description\n      }\n      collaborationStatus {\n        id\n        name\n        description\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n          helpText\n        }\n      }\n      collaborationResponses(where: { isHidden: { _eq: 0 } }, order_by: { createdAt: Desc }) {\n        id\n        profileId\n        message\n        contactInfo\n        isPublic\n        createdAt\n        isRead\n        collaborationProfile {\n          id\n          displayName\n          userId\n        }\n      }\n    }\n  }\n':
    types.CollaborationPostDetailDocument,
  '\n  query CollaborationFieldDefinitions($typeId: Int32!, $hiringStatusId: Int32!) {\n    collaborationFieldDefinition(\n      where: { collaborationTypeId: { _eq: $typeId }, hiringStatusId: { _eq: $hiringStatusId } }\n      order_by: { fieldOrder: Asc }\n    ) {\n      id\n      fieldName\n      displayName\n      fieldType\n      isRequired\n      fieldOrder\n      maxLength\n      validationRegex\n      helpText\n      options\n    }\n  }\n':
    types.CollaborationFieldDefinitionsDocument,
  '\n  query MyCollaborationResponses($profileId: String1!) {\n    collaborationResponse(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      message\n      contactInfo\n      isPublic\n      isHidden\n      createdAt\n      isRead\n      readAt\n      collaborationPost {\n        id\n        statusId\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n      }\n    }\n  }\n':
    types.MyCollaborationResponsesDocument,
  '\n  query PostResponses($postId: String1!, $profileId: String1!) {\n    collaborationResponse(\n      where: {\n        collaborationPostId: { _eq: $postId }\n        _or: [{ collaborationPost: { profileId: { _eq: $profileId } } }, { isPublic: { _eq: 1 } }]\n        isHidden: { _eq: 0 }\n      }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      profileId\n      message\n      contactInfo\n      isPublic\n      createdAt\n      isRead\n      readAt\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        userId\n      }\n    }\n  }\n':
    types.PostResponsesDocument,
  '\n  query MyBookmarks($profileId: String1!) {\n    collaborationBookmark(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      createdAt\n      collaborationPost {\n        id\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          value\n          collaborationFieldDefinition {\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n':
    types.MyBookmarksDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query AltAccounts {\n    altAccount {\n      userId\n      altId\n      staffMemberId\n      registeredAt\n    }\n  }\n'
): (typeof documents)['\n  query AltAccounts {\n    altAccount {\n      userId\n      altId\n      staffMemberId\n      registeredAt\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query Collabs {\n    collaborationProfile {\n      id\n      displayName\n      bio\n    }\n  }\n'
): (typeof documents)['\n  query Collabs {\n    collaborationProfile {\n      id\n      displayName\n      bio\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CollaborationTypes {\n    collaborationType {\n      id\n      name\n      description\n    }\n  }\n'
): (typeof documents)['\n  query CollaborationTypes {\n    collaborationType {\n      id\n      name\n      description\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query HiringStatuses {\n    hiringStatus {\n      id\n      name\n      description\n    }\n  }\n'
): (typeof documents)['\n  query HiringStatuses {\n    hiringStatus {\n      id\n      name\n      description\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CollaborationStatuses {\n    collaborationStatus {\n      id\n      name\n      description\n    }\n  }\n'
): (typeof documents)['\n  query CollaborationStatuses {\n    collaborationStatus {\n      id\n      name\n      description\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query MyCollaborationProfile($userId: Int64!) {\n    collaborationProfile(where: { userId: { _eq: $userId } }) {\n      id\n      userId\n      guildId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      createdAt\n      updatedAt\n      lastActiveAt\n      collaborationPosts {\n        id\n        statusId\n        responseCount\n        viewCount\n      }\n      collaborationResponses {\n        id\n        collaborationPostId\n        isRead\n      }\n      collaborationBookmarks {\n        id\n        collaborationPostId\n      }\n    }\n  }\n'
): (typeof documents)['\n  query MyCollaborationProfile($userId: Int64!) {\n    collaborationProfile(where: { userId: { _eq: $userId } }) {\n      id\n      userId\n      guildId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      createdAt\n      updatedAt\n      lastActiveAt\n      collaborationPosts {\n        id\n        statusId\n        responseCount\n        viewCount\n      }\n      collaborationResponses {\n        id\n        collaborationPostId\n        isRead\n      }\n      collaborationBookmarks {\n        id\n        collaborationPostId\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CollaborationProfileById($id: String1!) {\n    collaborationProfileById(id: $id) {\n      id\n      userId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      lastActiveAt\n      collaborationPosts(where: { statusId: { _eq: 2 } }, order_by: { postedAt: Desc }) {\n        id\n        collaborationTypeId\n        hiringStatusId\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          id\n          value\n          collaborationFieldDefinition {\n            id\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query CollaborationProfileById($id: String1!) {\n    collaborationProfileById(id: $id) {\n      id\n      userId\n      displayName\n      bio\n      skills\n      portfolio\n      contactPreferences\n      isPublic\n      lastActiveAt\n      collaborationPosts(where: { statusId: { _eq: 2 } }, order_by: { postedAt: Desc }) {\n        id\n        collaborationTypeId\n        hiringStatusId\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          id\n          value\n          collaborationFieldDefinition {\n            id\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CollaborationPosts(\n    $where: CollaborationPostBoolExp\n    $limit: Int\n    $offset: Int\n    $order_by: [CollaborationPostOrderByExp!]\n  ) {\n    collaborationPost(where: $where, limit: $limit, offset: $offset, order_by: $order_by) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        userId\n      }\n      collaborationType {\n        id\n        name\n      }\n      hiringStatus {\n        id\n        name\n      }\n      collaborationStatus {\n        id\n        name\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n        }\n      }\n      collaborationBookmarks {\n        profileId\n      }\n    }\n    collaborationPostAggregate(filter_input: { where: $where }) {\n      _count\n    }\n  }\n'
): (typeof documents)['\n  query CollaborationPosts(\n    $where: CollaborationPostBoolExp\n    $limit: Int\n    $offset: Int\n    $order_by: [CollaborationPostOrderByExp!]\n  ) {\n    collaborationPost(where: $where, limit: $limit, offset: $offset, order_by: $order_by) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        userId\n      }\n      collaborationType {\n        id\n        name\n      }\n      hiringStatus {\n        id\n        name\n      }\n      collaborationStatus {\n        id\n        name\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n        }\n      }\n      collaborationBookmarks {\n        profileId\n      }\n    }\n    collaborationPostAggregate(filter_input: { where: $where }) {\n      _count\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CollaborationPostDetail($id: String1!) {\n    collaborationPostById(id: $id) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        portfolio\n        contactPreferences\n        userId\n        lastActiveAt\n        isPublic\n      }\n      collaborationType {\n        id\n        name\n        description\n      }\n      hiringStatus {\n        id\n        name\n        description\n      }\n      collaborationStatus {\n        id\n        name\n        description\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n          helpText\n        }\n      }\n      collaborationResponses(where: { isHidden: { _eq: 0 } }, order_by: { createdAt: Desc }) {\n        id\n        profileId\n        message\n        contactInfo\n        isPublic\n        createdAt\n        isRead\n        collaborationProfile {\n          id\n          displayName\n          userId\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query CollaborationPostDetail($id: String1!) {\n    collaborationPostById(id: $id) {\n      id\n      profileId\n      guildId\n      collaborationTypeId\n      hiringStatusId\n      statusId\n      createdAt\n      postedAt\n      expiresAt\n      viewCount\n      responseCount\n      isHighlighted\n      tags\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        portfolio\n        contactPreferences\n        userId\n        lastActiveAt\n        isPublic\n      }\n      collaborationType {\n        id\n        name\n        description\n      }\n      hiringStatus {\n        id\n        name\n        description\n      }\n      collaborationStatus {\n        id\n        name\n        description\n      }\n      collaborationFieldValues {\n        id\n        value\n        collaborationFieldDefinition {\n          id\n          fieldName\n          displayName\n          fieldType\n          helpText\n        }\n      }\n      collaborationResponses(where: { isHidden: { _eq: 0 } }, order_by: { createdAt: Desc }) {\n        id\n        profileId\n        message\n        contactInfo\n        isPublic\n        createdAt\n        isRead\n        collaborationProfile {\n          id\n          displayName\n          userId\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CollaborationFieldDefinitions($typeId: Int32!, $hiringStatusId: Int32!) {\n    collaborationFieldDefinition(\n      where: { collaborationTypeId: { _eq: $typeId }, hiringStatusId: { _eq: $hiringStatusId } }\n      order_by: { fieldOrder: Asc }\n    ) {\n      id\n      fieldName\n      displayName\n      fieldType\n      isRequired\n      fieldOrder\n      maxLength\n      validationRegex\n      helpText\n      options\n    }\n  }\n'
): (typeof documents)['\n  query CollaborationFieldDefinitions($typeId: Int32!, $hiringStatusId: Int32!) {\n    collaborationFieldDefinition(\n      where: { collaborationTypeId: { _eq: $typeId }, hiringStatusId: { _eq: $hiringStatusId } }\n      order_by: { fieldOrder: Asc }\n    ) {\n      id\n      fieldName\n      displayName\n      fieldType\n      isRequired\n      fieldOrder\n      maxLength\n      validationRegex\n      helpText\n      options\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query MyCollaborationResponses($profileId: String1!) {\n    collaborationResponse(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      message\n      contactInfo\n      isPublic\n      isHidden\n      createdAt\n      isRead\n      readAt\n      collaborationPost {\n        id\n        statusId\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query MyCollaborationResponses($profileId: String1!) {\n    collaborationResponse(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      message\n      contactInfo\n      isPublic\n      isHidden\n      createdAt\n      isRead\n      readAt\n      collaborationPost {\n        id\n        statusId\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query PostResponses($postId: String1!, $profileId: String1!) {\n    collaborationResponse(\n      where: {\n        collaborationPostId: { _eq: $postId }\n        _or: [{ collaborationPost: { profileId: { _eq: $profileId } } }, { isPublic: { _eq: 1 } }]\n        isHidden: { _eq: 0 }\n      }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      profileId\n      message\n      contactInfo\n      isPublic\n      createdAt\n      isRead\n      readAt\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        userId\n      }\n    }\n  }\n'
): (typeof documents)['\n  query PostResponses($postId: String1!, $profileId: String1!) {\n    collaborationResponse(\n      where: {\n        collaborationPostId: { _eq: $postId }\n        _or: [{ collaborationPost: { profileId: { _eq: $profileId } } }, { isPublic: { _eq: 1 } }]\n        isHidden: { _eq: 0 }\n      }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      profileId\n      message\n      contactInfo\n      isPublic\n      createdAt\n      isRead\n      readAt\n      collaborationProfile {\n        id\n        displayName\n        bio\n        skills\n        userId\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query MyBookmarks($profileId: String1!) {\n    collaborationBookmark(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      createdAt\n      collaborationPost {\n        id\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          value\n          collaborationFieldDefinition {\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query MyBookmarks($profileId: String1!) {\n    collaborationBookmark(\n      where: { profileId: { _eq: $profileId } }\n      order_by: { createdAt: Desc }\n    ) {\n      id\n      collaborationPostId\n      createdAt\n      collaborationPost {\n        id\n        statusId\n        postedAt\n        expiresAt\n        viewCount\n        responseCount\n        tags\n        collaborationProfile {\n          displayName\n        }\n        collaborationType {\n          name\n        }\n        hiringStatus {\n          name\n        }\n        collaborationFieldValues {\n          value\n          collaborationFieldDefinition {\n            fieldName\n            displayName\n          }\n        }\n      }\n    }\n  }\n'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
