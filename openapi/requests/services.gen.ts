// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetHealthResponse, GetGuildsByGuildIdRulesData, GetGuildsByGuildIdRulesResponse, GetGuildsByGuildIdRulesByRuleIdData, GetGuildsByGuildIdRulesByRuleIdResponse, GetGuildsByGuildIdInfractionsData, GetGuildsByGuildIdInfractionsResponse, GetGuildsByGuildIdUsersByUserIdInfractionsData, GetGuildsByGuildIdUsersByUserIdInfractionsResponse, GetGuildsByGuildIdNotesData, GetGuildsByGuildIdNotesResponse, GetGuildsByGuildIdUsersByUserIdNotesData, GetGuildsByGuildIdUsersByUserIdNotesResponse } from './types.gen';

export class DefaultService {
    /**
     * Health check endpoint
     * Returns the API health status
     * @returns HealthCheck Health check successful
     * @throws ApiError
     */
    public static getHealth(): CancelablePromise<GetHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/health'
        });
    }
    
    /**
     * Get all rules for a guild
     * Retrieves all rules for the specified guild
     * @param data The data for the request.
     * @param data.guildId The Discord guild ID
     * @returns unknown A list of rules
     * @throws ApiError
     */
    public static getGuildsByGuildIdRules(data: GetGuildsByGuildIdRulesData): CancelablePromise<GetGuildsByGuildIdRulesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/guilds/{guildId}/rules',
            path: {
                guildId: data.guildId
            },
            errors: {
                404: 'Guild not found',
                500: 'Server error'
            }
        });
    }
    
    /**
     * Get rule by ID
     * Retrieves a specific rule by ID
     * @param data The data for the request.
     * @param data.guildId The Discord guild ID
     * @param data.ruleId The rule ID
     * @returns unknown The requested rule
     * @throws ApiError
     */
    public static getGuildsByGuildIdRulesByRuleId(data: GetGuildsByGuildIdRulesByRuleIdData): CancelablePromise<GetGuildsByGuildIdRulesByRuleIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/guilds/{guildId}/rules/{ruleId}',
            path: {
                guildId: data.guildId,
                ruleId: data.ruleId
            },
            errors: {
                404: 'Rule not found',
                500: 'Server error'
            }
        });
    }
    
    /**
     * Get all infractions for a guild
     * Retrieves all infractions for the specified guild (admin only)
     * @param data The data for the request.
     * @param data.guildId The Discord guild ID
     * @param data.userId Filter by user ID
     * @param data.type Filter by infraction type
     * @param data.limit Maximum number of results to return
     * @param data.offset Number of results to skip
     * @returns unknown A list of infractions
     * @throws ApiError
     */
    public static getGuildsByGuildIdInfractions(data: GetGuildsByGuildIdInfractionsData): CancelablePromise<GetGuildsByGuildIdInfractionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/guilds/{guildId}/infractions',
            path: {
                guildId: data.guildId
            },
            query: {
                userId: data.userId,
                type: data.type,
                limit: data.limit,
                offset: data.offset
            },
            errors: {
                401: 'Not authenticated',
                403: 'Access denied',
                500: 'Server error'
            }
        });
    }
    
    /**
     * Get infractions for a specific user
     * Retrieves all infractions for the specified user
     * @param data The data for the request.
     * @param data.guildId The Discord guild ID
     * @param data.userId The Discord user ID
     * @param data.limit Maximum number of results to return
     * @param data.offset Number of results to skip
     * @returns unknown A list of user infractions
     * @throws ApiError
     */
    public static getGuildsByGuildIdUsersByUserIdInfractions(data: GetGuildsByGuildIdUsersByUserIdInfractionsData): CancelablePromise<GetGuildsByGuildIdUsersByUserIdInfractionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/guilds/{guildId}/users/{userId}/infractions',
            path: {
                guildId: data.guildId,
                userId: data.userId
            },
            query: {
                limit: data.limit,
                offset: data.offset
            },
            errors: {
                401: 'Not authenticated',
                403: 'Access denied',
                500: 'Server error'
            }
        });
    }
    
    /**
     * Get all member notes for a guild
     * Retrieves all member notes for the specified guild (admin only)
     * @param data The data for the request.
     * @param data.guildId The Discord guild ID
     * @param data.userId Filter by user ID
     * @param data.type Filter by note type
     * @param data.limit Maximum number of results to return
     * @param data.offset Number of results to skip
     * @returns unknown A list of member notes
     * @throws ApiError
     */
    public static getGuildsByGuildIdNotes(data: GetGuildsByGuildIdNotesData): CancelablePromise<GetGuildsByGuildIdNotesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/guilds/{guildId}/notes',
            path: {
                guildId: data.guildId
            },
            query: {
                userId: data.userId,
                type: data.type,
                limit: data.limit,
                offset: data.offset
            },
            errors: {
                401: 'Not authenticated',
                403: 'Access denied',
                500: 'Server error'
            }
        });
    }
    
    /**
     * Get notes for a specific user
     * Retrieves all notes for the specified user
     * @param data The data for the request.
     * @param data.guildId The Discord guild ID
     * @param data.userId The Discord user ID
     * @param data.limit Maximum number of results to return
     * @param data.offset Number of results to skip
     * @returns unknown A list of user notes
     * @throws ApiError
     */
    public static getGuildsByGuildIdUsersByUserIdNotes(data: GetGuildsByGuildIdUsersByUserIdNotesData): CancelablePromise<GetGuildsByGuildIdUsersByUserIdNotesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/guilds/{guildId}/users/{userId}/notes',
            path: {
                guildId: data.guildId,
                userId: data.userId
            },
            query: {
                limit: data.limit,
                offset: data.offset
            },
            errors: {
                401: 'Not authenticated',
                403: 'Access denied',
                500: 'Server error'
            }
        });
    }
    
}