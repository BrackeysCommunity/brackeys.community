// This file is auto-generated by @hey-api/openapi-ts

export type Error = {
    success?: boolean;
    error?: string;
};

export type HealthCheck = {
    status?: string;
    timestamp?: string;
};

export type Rule = {
    id?: string;
    guildId?: string;
    title?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
};

export type Infraction = {
    id?: string;
    guildId?: string;
    userId?: string;
    /**
     * 0: Warning, 1: Mute, 2: Kick, 3: Ban
     */
    type?: '0' | '1' | '2' | '3';
    reason?: string;
    moderatorId?: string;
    createdAt?: string;
};

/**
 * 0: Warning, 1: Mute, 2: Kick, 3: Ban
 */
export type type = '0' | '1' | '2' | '3';

export type MemberNote = {
    id?: string;
    guildId?: string;
    userId?: string;
    content?: string;
    authorId?: string;
    createdAt?: string;
};

export type GetHealthResponse = HealthCheck;

export type GetGuildsByGuildIdRulesData = {
    /**
     * The Discord guild ID
     */
    guildId: string;
};

export type GetGuildsByGuildIdRulesResponse = {
    success?: boolean;
    data?: Array<Rule>;
};

export type GetGuildsByGuildIdRulesByRuleIdData = {
    /**
     * The Discord guild ID
     */
    guildId: string;
    /**
     * The rule ID
     */
    ruleId: string;
};

export type GetGuildsByGuildIdRulesByRuleIdResponse = {
    success?: boolean;
    data?: Rule;
};

export type GetGuildsByGuildIdInfractionsData = {
    /**
     * The Discord guild ID
     */
    guildId: string;
    /**
     * Maximum number of results to return
     */
    limit?: string;
    /**
     * Number of results to skip
     */
    offset?: string;
    /**
     * Filter by infraction type
     */
    type?: '0' | '1' | '2' | '3';
    /**
     * Filter by user ID
     */
    userId?: string;
};

export type GetGuildsByGuildIdInfractionsResponse = {
    success?: boolean;
    data?: Array<Infraction>;
};

export type GetGuildsByGuildIdUsersByUserIdInfractionsData = {
    /**
     * The Discord guild ID
     */
    guildId: string;
    /**
     * Maximum number of results to return
     */
    limit?: string;
    /**
     * Number of results to skip
     */
    offset?: string;
    /**
     * The Discord user ID
     */
    userId: string;
};

export type GetGuildsByGuildIdUsersByUserIdInfractionsResponse = {
    success?: boolean;
    data?: Array<Infraction>;
};

export type GetGuildsByGuildIdNotesData = {
    /**
     * The Discord guild ID
     */
    guildId: string;
    /**
     * Maximum number of results to return
     */
    limit?: string;
    /**
     * Number of results to skip
     */
    offset?: string;
    /**
     * Filter by note type
     */
    type?: string;
    /**
     * Filter by user ID
     */
    userId?: string;
};

export type GetGuildsByGuildIdNotesResponse = {
    success?: boolean;
    data?: Array<MemberNote>;
};

export type GetGuildsByGuildIdUsersByUserIdNotesData = {
    /**
     * The Discord guild ID
     */
    guildId: string;
    /**
     * Maximum number of results to return
     */
    limit?: string;
    /**
     * Number of results to skip
     */
    offset?: string;
    /**
     * The Discord user ID
     */
    userId: string;
};

export type GetGuildsByGuildIdUsersByUserIdNotesResponse = {
    success?: boolean;
    data?: Array<MemberNote>;
};

export type $OpenApiTs = {
    '/health': {
        get: {
            res: {
                /**
                 * Health check successful
                 */
                200: HealthCheck;
            };
        };
    };
    '/guilds/{guildId}/rules': {
        get: {
            req: GetGuildsByGuildIdRulesData;
            res: {
                /**
                 * A list of rules
                 */
                200: {
                    success?: boolean;
                    data?: Array<Rule>;
                };
                /**
                 * Guild not found
                 */
                404: Error;
                /**
                 * Server error
                 */
                500: Error;
            };
        };
    };
    '/guilds/{guildId}/rules/{ruleId}': {
        get: {
            req: GetGuildsByGuildIdRulesByRuleIdData;
            res: {
                /**
                 * The requested rule
                 */
                200: {
                    success?: boolean;
                    data?: Rule;
                };
                /**
                 * Rule not found
                 */
                404: Error;
                /**
                 * Server error
                 */
                500: Error;
            };
        };
    };
    '/guilds/{guildId}/infractions': {
        get: {
            req: GetGuildsByGuildIdInfractionsData;
            res: {
                /**
                 * A list of infractions
                 */
                200: {
                    success?: boolean;
                    data?: Array<Infraction>;
                };
                /**
                 * Not authenticated
                 */
                401: Error;
                /**
                 * Access denied
                 */
                403: Error;
                /**
                 * Server error
                 */
                500: Error;
            };
        };
    };
    '/guilds/{guildId}/users/{userId}/infractions': {
        get: {
            req: GetGuildsByGuildIdUsersByUserIdInfractionsData;
            res: {
                /**
                 * A list of user infractions
                 */
                200: {
                    success?: boolean;
                    data?: Array<Infraction>;
                };
                /**
                 * Not authenticated
                 */
                401: Error;
                /**
                 * Access denied
                 */
                403: Error;
                /**
                 * Server error
                 */
                500: Error;
            };
        };
    };
    '/guilds/{guildId}/notes': {
        get: {
            req: GetGuildsByGuildIdNotesData;
            res: {
                /**
                 * A list of member notes
                 */
                200: {
                    success?: boolean;
                    data?: Array<MemberNote>;
                };
                /**
                 * Not authenticated
                 */
                401: Error;
                /**
                 * Access denied
                 */
                403: Error;
                /**
                 * Server error
                 */
                500: Error;
            };
        };
    };
    '/guilds/{guildId}/users/{userId}/notes': {
        get: {
            req: GetGuildsByGuildIdUsersByUserIdNotesData;
            res: {
                /**
                 * A list of user notes
                 */
                200: {
                    success?: boolean;
                    data?: Array<MemberNote>;
                };
                /**
                 * Not authenticated
                 */
                401: Error;
                /**
                 * Access denied
                 */
                403: Error;
                /**
                 * Server error
                 */
                500: Error;
            };
        };
    };
};